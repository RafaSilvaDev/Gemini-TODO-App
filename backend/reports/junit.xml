<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="47" failures="0" errors="0" time="6.032">
  <testsuite name="src/__tests__/repository/ToDoRepositoty.spec.ts" errors="0" failures="0" skipped="0" timestamp="2024-09-24T18:09:12" time="3.728" tests="6">
    <testcase classname="ToDoRepository-should find all todos" name="ToDoRepository-should find all todos" time="0.006">
    </testcase>
    <testcase classname="ToDoRepository-should find a todo by ID and userId" name="ToDoRepository-should find a todo by ID and userId" time="0.001">
    </testcase>
    <testcase classname="ToDoRepository-should find all todos by userId" name="ToDoRepository-should find all todos by userId" time="0.001">
    </testcase>
    <testcase classname="ToDoRepository-should create a new todo" name="ToDoRepository-should create a new todo" time="0">
    </testcase>
    <testcase classname="ToDoRepository-should update a todo" name="ToDoRepository-should update a todo" time="0.001">
    </testcase>
    <testcase classname="ToDoRepository-should delete a todo" name="ToDoRepository-should delete a todo" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/controller/ToDoController.spec.ts" errors="0" failures="0" skipped="0" timestamp="2024-09-24T18:09:12" time="3.935" tests="24">
    <testcase classname="ToDoController-getAllTodos: should return 200 and todos when found" name="ToDoController-getAllTodos: should return 200 and todos when found" time="0.005">
    </testcase>
    <testcase classname="ToDoController-getAllTodos: should return 404 when no todos found" name="ToDoController-getAllTodos: should return 404 when no todos found" time="0">
    </testcase>
    <testcase classname="ToDoController-getAllTodos: should return 400 when userId is missing" name="ToDoController-getAllTodos: should return 400 when userId is missing" time="0">
    </testcase>
    <testcase classname="ToDoController-getAllTodos: should handle errors gracefully" name="ToDoController-getAllTodos: should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ToDoController-getTodoById: should return 200 and the todo when found" name="ToDoController-getTodoById: should return 200 and the todo when found" time="0.001">
    </testcase>
    <testcase classname="ToDoController-getTodoById: should return 404 when todo not found" name="ToDoController-getTodoById: should return 404 when todo not found" time="0">
    </testcase>
    <testcase classname="ToDoController-getTodoById: should return 400 when userId is missing" name="ToDoController-getTodoById: should return 400 when userId is missing" time="0.032">
    </testcase>
    <testcase classname="ToDoController-getTodoById: should handle errors gracefully" name="ToDoController-getTodoById: should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ToDoController-getTodosByUserId: should return 200 and todos when found" name="ToDoController-getTodosByUserId: should return 200 and todos when found" time="0.001">
    </testcase>
    <testcase classname="ToDoController-getTodosByUserId: should return 404 when no todos found" name="ToDoController-getTodosByUserId: should return 404 when no todos found" time="0">
    </testcase>
    <testcase classname="ToDoController-getTodosByUserId: should return 400 when userId is missing" name="ToDoController-getTodosByUserId: should return 400 when userId is missing" time="0.001">
    </testcase>
    <testcase classname="ToDoController-getTodosByUserId: should handle errors gracefully" name="ToDoController-getTodosByUserId: should handle errors gracefully" time="0">
    </testcase>
    <testcase classname="ToDoController-createTodo: should return 201 and create the todo when request body is valid" name="ToDoController-createTodo: should return 201 and create the todo when request body is valid" time="0.001">
    </testcase>
    <testcase classname="ToDoController-createTodo: should return 404 when request body is missing" name="ToDoController-createTodo: should return 404 when request body is missing" time="0.001">
    </testcase>
    <testcase classname="ToDoController-createTodo: should return 400 when userId is missing" name="ToDoController-createTodo: should return 400 when userId is missing" time="0">
    </testcase>
    <testcase classname="ToDoController-createTodo: should handle errors gracefully" name="ToDoController-createTodo: should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ToDoController-updateTodoById: should return 204 and update the todo when found" name="ToDoController-updateTodoById: should return 204 and update the todo when found" time="0.002">
    </testcase>
    <testcase classname="ToDoController-updateTodoById: should return 404 when todo not found" name="ToDoController-updateTodoById: should return 404 when todo not found" time="0.001">
    </testcase>
    <testcase classname="ToDoController-updateTodoById: should return 400 when userId is missing" name="ToDoController-updateTodoById: should return 400 when userId is missing" time="0">
    </testcase>
    <testcase classname="ToDoController-updateTodoById: should handle errors gracefully" name="ToDoController-updateTodoById: should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ToDoController-deleteTodoById: should return 204 and delete the todo when found" name="ToDoController-deleteTodoById: should return 204 and delete the todo when found" time="0.001">
    </testcase>
    <testcase classname="ToDoController-deleteTodoById: should return 404 when todo not found" name="ToDoController-deleteTodoById: should return 404 when todo not found" time="0">
    </testcase>
    <testcase classname="ToDoController-deleteTodoById: should return 400 when userId is missing" name="ToDoController-deleteTodoById: should return 400 when userId is missing" time="0.001">
    </testcase>
    <testcase classname="ToDoController-deleteTodoById: should handle errors gracefully" name="ToDoController-deleteTodoById: should handle errors gracefully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/auth/auth.spec.ts" errors="0" failures="0" skipped="0" timestamp="2024-09-24T18:09:12" time="5.827" tests="17">
    <testcase classname="Auth Module &gt; registerUser-should register a new user successfully" name="Auth Module &gt; registerUser-should register a new user successfully" time="0.01">
    </testcase>
    <testcase classname="Auth Module &gt; registerUser-should return 400 if username already exists" name="Auth Module &gt; registerUser-should return 400 if username already exists" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; registerUser-should handle errors gracefully" name="Auth Module &gt; registerUser-should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="Auth Module &gt; loginUser-should log in a user successfully" name="Auth Module &gt; loginUser-should log in a user successfully" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; loginUser-should return 401 if user not found" name="Auth Module &gt; loginUser-should return 401 if user not found" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; loginUser-should return 401 if password is invalid" name="Auth Module &gt; loginUser-should return 401 if password is invalid" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; loginUser-should handle errors gracefully" name="Auth Module &gt; loginUser-should handle errors gracefully" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; getUsers-should get all users" name="Auth Module &gt; getUsers-should get all users" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; getUserById-should get a user by ID" name="Auth Module &gt; getUserById-should get a user by ID" time="0.001">
    </testcase>
    <testcase classname="Auth Module &gt; getUserById-should return 404 if user not found" name="Auth Module &gt; getUserById-should return 404 if user not found" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; getUserById-should handle errors gracefully" name="Auth Module &gt; getUserById-should handle errors gracefully" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; updateUser-should update a user" name="Auth Module &gt; updateUser-should update a user" time="0.001">
    </testcase>
    <testcase classname="Auth Module &gt; updateUser-should return 404 if user not found" name="Auth Module &gt; updateUser-should return 404 if user not found" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; updateUser-should handle errors gracefully" name="Auth Module &gt; updateUser-should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="Auth Module &gt; deleteUser-should delete a user" name="Auth Module &gt; deleteUser-should delete a user" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; deleteUser-should return 404 if user not found" name="Auth Module &gt; deleteUser-should return 404 if user not found" time="0">
    </testcase>
    <testcase classname="Auth Module &gt; deleteUser-should handle errors gracefully" name="Auth Module &gt; deleteUser-should handle errors gracefully" time="0.001">
    </testcase>
  </testsuite>
</testsuites>